import numpy as np

def GroupTrialsbyState(bandit_task, state_changes, num_trials):
    trial_groups = []
    begin_range = 0
    for i in range(len(state_changes)):
        end_range = state_changes[i]["trial_num"]
        trial_group = {
            "trials": np.arange(begin_range, end_range),
            "state": state_changes[i]["from"],
            "high_arm": np.argmax(bandit_task.arms_across_states[state_changes[i]["from"]])
        }
        begin_range = end_range
        trial_groups.append(trial_group)
    return trial_groups

def GetProportionHighArm(bandit_task, state_changes, actions, num_trials):
    proportions_high_arm = []
    trial_groups = GroupTrialsbyState(bandit_task, state_changes, num_trials)
    for i in range(len(trial_groups)):
        curr_trials = trial_groups[i]["trials"]
        curr_actions = actions[curr_trials]
        high_arm_actions = curr_actions == trial_groups[i]["high_arm"]
        proportion_high_arm = np.cumsum(high_arm_actions)/np.cumsum(np.ones(curr_trials))
        proportions_high_arm.append(proportion_high_arm)
    return proportions_high_arm

def GetSwitchProbabilities(switches, c):

    if c == 2:
        a, b = (0,1)
    elif c == 1:
        a, b = (0,2)
    elif c == 0:
        a, b = (1,2)
    
    c_to_a = 0
    c_to_b = 0
    total_c = 0

    for i in range(len(switches)):
        if switches[i]["from"] == c:
            total_c = total_c + 1
            if switches[i]["to"] == a:
                c_to_a = c_to_a + 1
            elif switches[i]["to"] == b:
                c_to_b = c_to_b + 1
    
    prob_c_to_a = c_to_a/total_c
    prob_c_to_b = c_to_b/total_c

    assert prob_c_to_a + prob_c_to_b == 1
    assert total_c == c_to_a + c_to_b

    return prob_c_to_a, prob_c_to_b