import numpy as np
import matplotlib.pyplot as plt
import pickle
from bandit_task_simulation import QLearningInferenceMouse, CorrelatedBanditTask
from analysis_fxns import GroupTrialsbyState, GetSwitchProbabilities
from plotting_fxns import PlotSummaryFigure, PlotOptoChoices, PlotSummaryPFigure, PlotSummaryQStatesFigure, PlotSummaryQActionsFigure

alpha_start = 0
alpha_end = 4.5
delta_alpha_sweep = np.linspace(alpha_start, alpha_end, num=10, endpoint=True).tolist()

beta_start = 10**0
beta_end = 10**2
delta_beta_sweep = np.logspace(np.log10(beta_start), np.log10(beta_end), num=10, endpoint=True).tolist()

parameter_sweep_dictionaries = []

for delta_alpha in delta_alpha_sweep:

    for delta_beta in delta_beta_sweep:
        
        num_perturbations = 1000
        min_non_opto_trials = 900
        snippet = 250
        after_opto_action = []

        for i in range(num_perturbations):
            # Define the parameters and structure of the task
            num_trials = 1000
            arms_across_states = [[0.5,0.9,0.1],[0.5,0.1,0.9]]
            num_arms = len(arms_across_states[0])
            drift_rates = np.zeros(num_arms)

            num_states = len(arms_across_states)
            state_switch_probability = 0.02
            state_change_probabilities = np.full((num_states,num_states),state_switch_probability)
            np.fill_diagonal(state_change_probabilities, 1-state_switch_probability)

            # Define the parameters for the mouse
            learning_rate = 0.05
            initial_state_prior = np.full((num_states),0.5)
            alpha = 0.25
            beta = 2
            opto_change = "both"

            bandit_task = CorrelatedBanditTask(arms_across_states, state_change_probabilities, delta_beta, delta_alpha)
            mouse = QLearningInferenceMouse(num_arms, num_states, initial_state_prior, learning_rate, beta, alpha, opto_change)
            actions, rewards, switches, state_changes, posterior, q_states, q_actions, high_arm_opto_trial = bandit_task.simulate_optogenetics(mouse, num_trials, min_non_opto_trials)
            # If the agent chose the high arm, record that as a 2
            if actions[-1] == high_arm_opto_trial:
                after_opto_action.append(2)
            # If the agent chose the uncorrelated arm, record that as a 0
            elif actions[-1] == 0:
                after_opto_action.append(0)
            # If the agent chose the low arm, record that as a 1
            else:
                after_opto_action.append(1)

        # Histogram values: [Uncorrelated, Low, High]
        hist_values, bin_edges = np.histogram(after_opto_action, bins=[0, 1, 2, 3], density=True)
        rand_low_difference = hist_values[0] - hist_values[1]
        proportion_high = hist_values[2]

        dictionary = {
            "delta_alpha": delta_alpha,
            "delta_beta": delta_beta,
            "after_opto_action": after_opto_action,
            "hist_values": hist_values,
            "rand_low_difference": rand_low_difference,
            "proportion_high": proportion_high
        }
        parameter_sweep_dictionaries.append(dictionary)

        with open('parameter_sweep_dictionaries.pk1', 'wb') as pickle_file:
            pickle.dump(parameter_sweep_dictionaries, pickle_file)
        
        print("DONE: delta_alpha " + str(delta_alpha) + " and delta_beta " + str(delta_beta))