import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from database_fxns import *
from analysis_fxns import *

def PlotNumTrialsAcrossSessions(mice):

    fig, ax = plt.subplots()
    means = []
    for mouse in mice:
        data_across_sessions = getDataforAllSessions(mouse)
        num_trials_across_sessions = []
        for session in data_across_sessions:
            num_trials_across_sessions.append(getNumTrials(session))
        
        session_number = np.arange(1, len(num_trials_across_sessions) + 1)
        means.append(np.mean(num_trials_across_sessions[8:]))
        ax.plot(session_number, num_trials_across_sessions, linewidth=2, label=mouse)

    print(len(num_trials_across_sessions[8:]))
    print(means)
    print(np.mean(means))
    ax.axvline(9, color='black', linestyle='dashed', linewidth=2)
    ax.text(9 + 0.2, 700*0.9, f'Current version of task', color='black')
    ax.set_xlabel("Session Number")
    ax.set_ylabel("Number of Trials")
    ax.set_title("Number of Trials across Sessions")
    ax.set_ylim([0, 750])
    ax.set_xlim([1, len(num_trials_across_sessions)])
    plt.legend(title="Mouse")
    plt.show()

def PlotNumStateChanges(sessions):

    num_state_changes_across_sessions = []
    for session in sessions:
        num_state_changes = len(getStateChanges(session))
        num_state_changes_across_sessions.append(num_state_changes)
    mean_num_state_changes = np.mean(num_state_changes_across_sessions)
    counts, bins, _ = plt.hist(num_state_changes_across_sessions, bins='auto', color='skyblue', alpha=0.7, rwidth=0.85)
    max_count = counts.max()

    fig, ax = plt.subplots()

    ax.hist(bins[:-1], bins, weights=counts, color='skyblue', alpha=0.7, rwidth=0.85)
    ax.axvline(mean_num_state_changes, color='black', linestyle='dashed', linewidth=1)
    ax.text(mean_num_state_changes + 0.2, max_count*0.9, f'Mean: {mean_num_state_changes:.2f}', color='black')
    ax.set_ylim([0, max_count + 5])

    ax.set_title('Histogram of the Number of State Changes in a Session')
    ax.set_xlabel('Number of State Changes')
    ax.set_ylabel('Frequency')
    plt.show()

def PlotBlockLength(sessions):

    block_lengths_across_sessions = []
    for session in sessions:
        trial_groups = GroupTrialsbyState(session)
        for trial_group in trial_groups:
            block_lengths_across_sessions.append(trial_group["length"])
    
    mean_block_length = np.mean(block_lengths_across_sessions)
    counts, bins, _ = plt.hist(block_lengths_across_sessions, bins='auto', color='skyblue', alpha=0.7, rwidth=0.85)
    max_count = counts.max()

    fig, ax = plt.subplots()

    ax.hist(bins[:-1], bins, weights=counts, color='skyblue', alpha=0.7, rwidth=0.85)
    ax.axvline(mean_block_length, color='black', linestyle='dashed', linewidth=1)
    ax.text(mean_block_length + 0.2, max_count*0.9, f'Mean: {mean_block_length:.2f}', color='black')
    ax.set_ylim([0, max_count + 5])

    ax.set_title('Histogram of the Length of the Trial Blocks in a Session')
    ax.set_xlabel('Length of Trial Block')
    ax.set_ylabel('Frequency')
    plt.show()

def PlotNumTrialsOverTime(session, time_bin):

    bins, bin_counts = GroupTrialsbyTime(session, time_bin)
    print(bin_counts.values)
    labels = bin_counts.index
    start_labels = [label.split('-')[0].strip() for label in labels]
    num_labels = len(labels)
    print(num_labels)

    fig, ax = plt.subplots()
    ax.plot(bin_counts.index, bin_counts.values, color='skyblue')

    ax.set_xlabel('Time (ms)')
    ax.set_ylabel('Number of Trials')
    ax.set_title('Number of Trials Over Time')
    ax.set_ylim([0,15])
    ax.set_xlim([0,num_labels])
    tick_positions = [0, num_labels // 2, num_labels - 1]
    tick_labels = [start_labels[i] for i in tick_positions]
    ax.set_xticks(tick_positions)
    ax.set_xticklabels(tick_labels)

    plt.show()

def PlotProportionHighArmOverTime(mice):

    fig, ax = plt.subplots()
    for mouse in mice:
        proportions_high_arm = []
        data_across_sessions = getDataforAllSessions(mouse)
        for session in data_across_sessions:
            high_arm_actions = getProportionHighArm(session)
            proportion_high_arm = np.sum(high_arm_actions)/high_arm_actions.shape[0]
            proportions_high_arm.append(proportion_high_arm)
        session_number = np.arange(1, len(data_across_sessions) + 1)
        ax.plot(session_number, proportions_high_arm, linewidth=2, label=mouse)
    
    ax.set_xlabel("Session Number")
    ax.set_ylabel("Proportion of High Arm Choices")
    ax.set_title("Proportion of High Arm Choices Across Sessions")
    ax.set_ylim([0, 1])
    ax.set_xlim([1, len(proportions_high_arm)])
    plt.legend(title="Mouse")
    plt.show()

def PlotNumTrialstoSwitchtoHighArmAcrossSessions(mice):

    fig, ax = plt.subplots()
    for mouse in mice:
        start_date = ["2024-04-06"]
        mean_across_sessions = []
        sessions = getDataforSomeSessions(mouse, start_date, from_start_date=True)
        for session in sessions:
            switch_trials, num_no_switches = getNewHighArmSwitchTrial(session)
            mean_across_sessions.append(np.mean(switch_trials))
        session_number = np.arange(1, len(sessions) + 1)
        ax.plot(session_number, mean_across_sessions, linewidth=2, label=mouse)
    
    ax.set_xlabel("Session Number")
    ax.set_ylabel("Number of Trials")
    ax.set_title("Number of Trials before Switching to New High Arm after State Change")
    # ax.set_ylim([0, 1])
    ax.set_xlim([1, len(sessions)])
    plt.legend(title="Mouse")
    plt.show()

def PlotNumTrialstoSwitchtoAnyArmAcrossSessions(mice):

    fig, ax = plt.subplots()
    for mouse in mice:
        start_date = ["2024-04-06"]
        mean_across_sessions = []
        sessions = getDataforSomeSessions(mouse, start_date, from_start_date=True)
        for session in sessions:
            switch_trials, num_no_switches = getAnyArmSwitchTrial(session)
            mean_across_sessions.append(np.mean(switch_trials))
        session_number = np.arange(1, len(sessions) + 1)
        ax.plot(session_number, mean_across_sessions, linewidth=2, label=mouse)
    
    ax.set_xlabel("Session Number")
    ax.set_ylabel("Number of Trials")
    ax.set_title("Number of Trials before Switching Away from the Previous High Arm after State Change")
    # ax.set_ylim([0, 1])
    ax.set_xlim([1, len(sessions)])
    plt.legend(title="Mouse")
    plt.show()

def PlotSession(session):

    num_trials = getNumTrials(session)
    actions, rewards = getActionsandRewards(session)
    trial_groups = GroupTrialsbyState(session)

    arm_0_inds = np.where(actions == 1)
    reward_trials = np.where(rewards == 1)[0] + 1

    fig, ax = plt.subplots()
    x = np.arange(1, num_trials + 1)
    used_labels = set()
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        begin = curr_trial_group["trials"][0]
        end = curr_trial_group["trials"][-1]

        if curr_state == 1:
            label = "Arm 2 High" if "Arm 2 High" not in used_labels else None
        else:
            label = "Arm 1 High" if "Arm 1 High" not in used_labels else None

        if label:
            used_labels.add(label)

        ax.fill_between(x, -0.01, 2.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3 if curr_state == 1 else 0, label=label)

    ax.set_xlabel("Number of Trials")
    ax.set_xlim(1, num_trials + 1)
    ax.set_ylabel("Action Taken")
    ax.set_ylim([-0.02, 2.02])
    ax.set_yticks([0,1,2])
    ax.set_yticklabels(["Arm 1", "Arm 0", "Arm 2"])
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    for i in range(1, num_trials + 1):
        if i in reward_trials:
            ax.scatter(i, actions[i - 1], color="yellowgreen")
        else:
            ax.scatter(i, actions[i - 1], color="red", marker='x')
    
    plt.legend(title="State")
    plt.show()

def PlotImpulsivity(mice, dates_of_interest):

    fig, ax = plt.subplots()

    for mouse in mice:
        sessions = getDataforSomeSessions(mouse, dates_of_interest)
        session_number = np.arange(1, len(sessions) + 1)
        preprocessed_sessions = []
        for session in sessions:
            preprocessed_session = getPreprocessedSessionData(session)
            preprocessed_sessions.append(preprocessed_session)
        mean_num_iti_events = []
        for session in sessions:
            iti_events_across_trials = getITIEventsAcrossTrials(session)
            num_iti_events = []
            for iti_events in iti_events_across_trials:
                num_iti_events.append(iti_events["num_events"])
            mean_num_iti_events.append(np.mean(np.asarray(num_iti_events)))
        ax.plot(session_number, mean_num_iti_events, linewidth=2, label=mouse)
    
    ax.set_xlabel("Session Number")
    ax.set_ylabel("Number of Licks during the ITI")
    ax.set_title("Number of Licks during the ITI across Sessions")
    ax.set_ylim([0, 50])
    ax.set_xlim([1, len(mean_num_iti_events)])
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    plt.legend(title="Mouse")
    plt.show()

def PlotStayandSampleLicks(mouse, sessions):
    
    iti_events_by_type_across_sessions = []
    for session in sessions:
        iti_events_by_type_across_trials = getTypeofITIEventAcrossTrials(session)
        iti_events_by_type_across_sessions = iti_events_by_type_across_sessions + iti_events_by_type_across_trials
    
    total_num_stay_licks = 0
    total_num_stay_licks_random = 0
    total_num_stay_licks_high = 0
    total_num_stay_licks_low = 0
    total_num_sample_licks = 0
    total_num_sample_licks_random = 0
    total_num_sample_licks_high = 0
    total_num_sample_licks_low = 0
    for i in range(len(iti_events_by_type_across_sessions)):
        curr_session = iti_events_by_type_across_sessions[i]
        total_num_stay_licks = total_num_stay_licks + curr_session["num_stay_licks"]
        total_num_stay_licks_random = total_num_stay_licks_random + curr_session["num_stay_licks_random"]
        total_num_stay_licks_high = total_num_stay_licks_high + curr_session["num_stay_licks_high"]
        total_num_stay_licks_low = total_num_stay_licks_low + curr_session["num_stay_licks_low"]
        total_num_sample_licks = total_num_sample_licks + curr_session["num_sample_licks"]
        total_num_sample_licks_random = total_num_sample_licks_random + curr_session["num_sample_licks_random"]
        total_num_sample_licks_high = total_num_sample_licks_high + curr_session["num_sample_licks_high"]
        total_num_sample_licks_low = total_num_sample_licks_low + curr_session["num_sample_licks_low"]
    
    categories = ["Exploit", "Explore"]
    values = [total_num_stay_licks, total_num_sample_licks]
    fig, ax = plt.subplots()
    bars = ax.bar(categories, values, align='center')
    ax.set_title('Exploit v. Explore Licks for ' + mouse)
    ax.set_xlabel('Lick Type')
    ax.set_ylabel('Number of Licks')
    ax.set_xticks(range(len(categories)))
    ax.set_xticklabels(categories)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)

    plt.show()

def PlotDistributionofSampleLicks(mouse, sessions):
    
    iti_events_by_type_across_sessions = []
    for session in sessions:
        iti_events_by_type_across_trials = getTypeofITIEventAcrossTrials(session)
        iti_events_by_type_across_sessions = iti_events_by_type_across_sessions + iti_events_by_type_across_trials
    
    total_num_stay_licks = 0
    total_num_stay_licks_random = 0
    total_num_stay_licks_high = 0
    total_num_stay_licks_low = 0
    total_num_sample_licks = 0
    total_num_sample_licks_random = 0
    total_num_sample_licks_high = 0
    total_num_sample_licks_low = 0
    for i in range(len(iti_events_by_type_across_sessions)):
        curr_session = iti_events_by_type_across_sessions[i]
        total_num_stay_licks = total_num_stay_licks + curr_session["num_stay_licks"]
        total_num_stay_licks_random = total_num_stay_licks_random + curr_session["num_stay_licks_random"]
        total_num_stay_licks_high = total_num_stay_licks_high + curr_session["num_stay_licks_high"]
        total_num_stay_licks_low = total_num_stay_licks_low + curr_session["num_stay_licks_low"]
        total_num_sample_licks = total_num_sample_licks + curr_session["num_sample_licks"]
        total_num_sample_licks_random = total_num_sample_licks_random + curr_session["num_sample_licks_random"]
        total_num_sample_licks_high = total_num_sample_licks_high + curr_session["num_sample_licks_high"]
        total_num_sample_licks_low = total_num_sample_licks_low + curr_session["num_sample_licks_low"]
    
    categories = ["Random", "High", "Low"]
    values = [total_num_sample_licks_random, total_num_sample_licks_high, total_num_sample_licks_low]
    fig, ax = plt.subplots()
    bars = ax.bar(categories, values, align='center')
    ax.set_title('Distribution of Explore Licks for ' + mouse)
    ax.set_xlabel('Lick Type')
    ax.set_ylabel('Number of Licks')
    ax.set_xticks(range(len(categories)))
    ax.set_xticklabels(categories)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    plt.show()

def PlotDistributionofSampleLicksbyArm(mouse, sessions):

    def getTotals(iti_events_by_type_across_sessions):
        total_num_stay_licks = 0
        total_num_stay_licks_left = 0
        total_num_stay_licks_center = 0
        total_num_stay_licks_right = 0
        total_num_sample_licks = 0
        total_num_sample_licks_left = 0
        total_num_sample_licks_center = 0
        total_num_sample_licks_right = 0
        for i in range(len(iti_events_by_type_across_sessions)):
            curr_session = iti_events_by_type_across_sessions[i]
            total_num_stay_licks = total_num_stay_licks + curr_session["num_stay_licks"]
            total_num_stay_licks_left = total_num_stay_licks_left + curr_session["num_stay_licks_left"]
            total_num_stay_licks_center = total_num_stay_licks_center + curr_session["num_stay_licks_center"]
            total_num_stay_licks_right = total_num_stay_licks_right + curr_session["num_stay_licks_right"]
            total_num_sample_licks = total_num_sample_licks + curr_session["num_sample_licks"]
            total_num_sample_licks_left = total_num_sample_licks_left + curr_session["num_sample_licks_left"]
            total_num_sample_licks_center = total_num_sample_licks_center + curr_session["num_sample_licks_center"]
            total_num_sample_licks_right = total_num_sample_licks_right + curr_session["num_sample_licks_right"]
        return total_num_sample_licks_left, total_num_sample_licks_center, total_num_sample_licks_right
    
    iti_events_by_type_left_across_sessions = []
    iti_events_by_type_center_across_sessions = []
    iti_events_by_type_right_across_sessions = []
    for session in sessions:
        iti_events_by_type_left, iti_events_by_type_center, iti_events_by_type_right = getTypeofITIEventByArm(session)
        iti_events_by_type_left_across_sessions = iti_events_by_type_left_across_sessions + iti_events_by_type_left
        iti_events_by_type_center_across_sessions = iti_events_by_type_center_across_sessions + iti_events_by_type_center
        iti_events_by_type_right_across_sessions = iti_events_by_type_right_across_sessions + iti_events_by_type_right
    
    _, center_licks_left_trial, right_licks_left_trial = getTotals(iti_events_by_type_left_across_sessions)
    left_licks_center_trial, _, right_licks_center_trial = getTotals(iti_events_by_type_center_across_sessions)
    left_licks_right_trial, center_licks_right_trial, _ = getTotals(iti_events_by_type_right_across_sessions)

    data = [[center_licks_left_trial, right_licks_left_trial], [left_licks_center_trial, right_licks_center_trial], [left_licks_right_trial, center_licks_right_trial]]

    fig, ax = plt.subplots()
    bar_width = 0.25
    index = np.arange(len(data))
    curr_trial_label = ["Left", "Center", "Right"]
    within_trial_labels = [
        ["to Center from Left", "to Right from Left"],
        ["to Left from Center", "to Right from Center"],
        ["to Left from Right", "to Center from Right"]
    ]
    plot_colors = [['#5C5C5C','#30298A'],['#0976DC','#08A4CB'],['#5EBE8C','#C9BD59']]

    for i, (choices, labels) in enumerate(zip(data, within_trial_labels)):
        for j, (count, label) in enumerate(zip(choices, labels)):
            ax.bar(index[i] + j * bar_width, count, bar_width, label=label, color=plot_colors[i][j])

    ax.set_xlabel("Current Trial Choice")
    ax.set_ylabel("Sample Licks Count")
    ax.set_title("Sample Licks by Arm for " + mouse)
    ax.set_xticks(index + bar_width / 2)
    ax.set_xticklabels(curr_trial_label)
    ax.legend(title="Sample", loc='upper right')
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)

    plt.show()

def PlotDistributionofSampleLicksbyTrialType(mouse, sessions):

    def getTotals(iti_events_by_type_across_sessions):
        total_num_stay_licks = 0
        total_num_stay_licks_random = 0
        total_num_stay_licks_high = 0
        total_num_stay_licks_low = 0
        total_num_sample_licks = 0
        total_num_sample_licks_random = 0
        total_num_sample_licks_high = 0
        total_num_sample_licks_low = 0
        for i in range(len(iti_events_by_type_across_sessions)):
            curr_session = iti_events_by_type_across_sessions[i]
            total_num_stay_licks = total_num_stay_licks + curr_session["num_stay_licks"]
            total_num_stay_licks_random = total_num_stay_licks_random + curr_session["num_stay_licks_random"]
            total_num_stay_licks_high = total_num_stay_licks_high + curr_session["num_stay_licks_high"]
            total_num_stay_licks_low = total_num_stay_licks_low + curr_session["num_stay_licks_low"]
            total_num_sample_licks = total_num_sample_licks + curr_session["num_sample_licks"]
            total_num_sample_licks_random = total_num_sample_licks_random + curr_session["num_sample_licks_random"]
            total_num_sample_licks_high = total_num_sample_licks_high + curr_session["num_sample_licks_high"]
            total_num_sample_licks_low = total_num_sample_licks_low + curr_session["num_sample_licks_low"]
        return total_num_sample_licks_random, total_num_sample_licks_high, total_num_sample_licks_low
    
    def Plot(iti_events_state_across_sessions, state_info):
        _, high_licks_random_trial, low_licks_random_trial = getTotals(iti_events_state_across_sessions["random"])
        random_licks_high_trial, _, low_licks_high_trial = getTotals(iti_events_state_across_sessions["high"])
        random_licks_low_trial, high_licks_low_trial, _ = getTotals(iti_events_state_across_sessions["low"])

        data = [[high_licks_random_trial, low_licks_random_trial], [random_licks_high_trial, low_licks_high_trial], [random_licks_low_trial, high_licks_low_trial]]

        fig, ax = plt.subplots()
        bar_width = 0.25
        index = np.arange(len(data))
        curr_trial_label = ["Random", "High", "Low"]
        within_trial_labels = [
            ["to High from Random", "to Low from Random"],
            ["to Random from High", "to Low from High"],
            ["to Random from Low", "to High from Low"]
        ]
        plot_colors = [['#5C5C5C','#30298A'],['#0976DC','#08A4CB'],['#5EBE8C','#C9BD59']]

        for i, (choices, labels) in enumerate(zip(data, within_trial_labels)):
            for j, (count, label) in enumerate(zip(choices, labels)):
                ax.bar(index[i] + j * bar_width, count, bar_width, label=label, color=plot_colors[i][j])

        ax.set_xlabel("Current Trial Choice")
        ax.set_ylabel("Sample Licks Count")
        ax.set_title("Sample Licks by Trial for " + mouse + " in " + state_info)
        ax.set_xticks(index + bar_width / 2)
        ax.set_xticklabels(curr_trial_label)
        ax.legend(title="Sample", loc='upper right')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)

        plt.show()
    
    iti_events_state_0_across_sessions = {
        "random": [],
        "high": [],
        "low": []
    }
    iti_events_state_1_across_sessions = {
        "random": [],
        "high": [],
        "low": []
    }
    for session in sessions:
        iti_events_state_0, iti_events_state_1 = getTypeofITIEventByTrialType(session)
        iti_events_state_0_across_sessions["random"] = iti_events_state_0_across_sessions["random"] + iti_events_state_0["random"]
        iti_events_state_0_across_sessions["high"] = iti_events_state_0_across_sessions["high"] + iti_events_state_0["high"]
        iti_events_state_0_across_sessions["low"] = iti_events_state_0_across_sessions["low"] + iti_events_state_0["low"]
        iti_events_state_1_across_sessions["random"] = iti_events_state_1_across_sessions["random"] + iti_events_state_1["random"]
        iti_events_state_1_across_sessions["high"] = iti_events_state_1_across_sessions["high"] + iti_events_state_1["high"]
        iti_events_state_1_across_sessions["low"] = iti_events_state_1_across_sessions["low"] + iti_events_state_1["low"]

    if mouse[-1] == 'C':
        state_0_info = "State 0: Left High"
        state_1_info = "State 1: Right High"
    elif mouse[-1] == 'R':
        state_0_info = "State 0: Left High"
        state_1_info = "State 1: Center High"
    elif mouse[-1] == 'L':
        state_0_info = "State 0: Center High"
        state_1_info = "State 1: Right High"

    Plot(iti_events_state_0_across_sessions, state_0_info)
    Plot(iti_events_state_1_across_sessions, state_1_info)

def PlotNumStableStateandActionBlocks(mice, dates_of_interest):

    fig, ax = plt.subplots()
    for mouse in mice:
        num_blocks = []
        sessions = getDataforSomeSessions(mouse, dates_of_interest)
        preprocessed_sessions = []
        for session in sessions:
            preprocessed_session = getPreprocessedSessionData(session)
            preprocessed_sessions.append(preprocessed_session)

        for session in preprocessed_sessions:
            blocks = getStableActionandStateBlocks(session)
            num_blocks.append(len(blocks))
        
        session_number = np.arange(1, len(num_blocks) + 1)
        ax.plot(session_number, num_blocks, linewidth=2, label=mouse)

    ax.set_xlabel("Session Number")
    ax.set_ylabel("Number of Blocks")
    ax.set_title("Number of Blocks with at least 5 Choices in a Row in a Stable State")
    ax.set_ylim([0, 30])
    ax.set_xlim([1, len(num_blocks)])
    plt.legend(title="Mouse")
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    plt.show()

def PlotDistributionofLengthsofStableStateandActionBlocks(mouse, sessions):

    block_lengths_across_sessions = []
    for session in sessions:
        blocks = getStableActionandStateBlocks(session)
        block_lengths = []
        for block in blocks:
            block_lengths.append(block["block length"])
        block_lengths_across_sessions.append(block_lengths)
    
    block_lengths_across_sessions_df = {
        'Session': [],
        'Block Length': []
    }

    for i, lengths in enumerate(block_lengths_across_sessions):
        block_lengths_across_sessions_df['Session'].extend([i + 1] * len(lengths))
        block_lengths_across_sessions_df['Block Length'].extend(lengths)

    block_lengths_across_sessions_df = pd.DataFrame(block_lengths_across_sessions_df)

    plt.figure()
    sns.boxplot(x='Session', y='Block Length', data=block_lengths_across_sessions_df)

    plt.title('Lengths of Blocks with at least 5 Choices in a Row in a Stable State across Sessions for ' + mouse)
    plt.xlabel('Session Number')
    plt.ylabel('Block Length')

    plt.show()

def PlotDistributionofLengthsofHighArmStableStateandActionBlocks(mouse, sessions):

    block_lengths_across_sessions = []
    for session in sessions:
        blocks = getStableActionandStateBlocks(session)
        block_lengths = []
        for block in blocks:
            if block["choice"] == block["high arm"]:
                block_lengths.append(block["block length"])
        block_lengths_across_sessions.append(block_lengths)
    
    block_lengths_across_sessions_df = {
        'Session': [],
        'Block Length': []
    }

    for i, lengths in enumerate(block_lengths_across_sessions):
        block_lengths_across_sessions_df['Session'].extend([i + 1] * len(lengths))
        block_lengths_across_sessions_df['Block Length'].extend(lengths)

    block_lengths_across_sessions_df = pd.DataFrame(block_lengths_across_sessions_df)

    plt.figure()
    sns.boxplot(x='Session', y='Block Length', data=block_lengths_across_sessions_df)

    plt.title('Lengths of Blocks with at least 5 High Arm Choices in a Row in a Stable State across Sessions for ' + mouse)
    plt.xlabel('Session Number')
    plt.ylabel('Block Length')

    plt.show()

def PlotDistributionofExploratoryChoicesAfterStateChange(mouse, sessions):

    total_num_random_choices = 0
    total_num_high_choices = 0
    total_num_low_choices = 0
    for session in sessions:
        exploratory_actions = ProportionExplorationAfterStateChange(session)
        for action in exploratory_actions:
            total_num_random_choices = total_num_random_choices + action["random"]
            total_num_high_choices = total_num_high_choices + action["high"]
            total_num_low_choices = total_num_low_choices + action["low"]
    
    categories = ["Random", "High", "Low"]
    values = [total_num_random_choices, total_num_high_choices, total_num_low_choices]
    fig, ax = plt.subplots()
    bars = ax.bar(categories, values, align='center')
    ax.set_title('Distribution of Trials After State Change for ' + mouse)
    ax.set_xlabel('Trial Type')
    ax.set_ylabel('Number of Trials')
    ax.set_xticks(range(len(categories)))
    ax.set_xticklabels(categories)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    plt.show()

def PlotDistributionofExploratoryChoicesWithinState(mouse, sessions):

    total_num_random_choices = 0
    total_num_high_choices = 0
    total_num_low_choices = 0
    for session in sessions:
        exploratory_actions = ProportionExplorationWithinState(session)
        for action in exploratory_actions:
            total_num_random_choices = total_num_random_choices + action["random"]
            total_num_high_choices = total_num_high_choices + action["high"]
            total_num_low_choices = total_num_low_choices + action["low"]
    
    categories = ["Random", "High", "Low"]
    values = [total_num_random_choices, total_num_high_choices, total_num_low_choices]
    fig, ax = plt.subplots()
    bars = ax.bar(categories, values, align='center')
    ax.set_title('Distribution of Exploratory Trials Within State for ' + mouse)
    ax.set_xlabel('Trial Type')
    ax.set_ylabel('Number of Trials')
    ax.set_xticks(range(len(categories)))
    ax.set_xticklabels(categories)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    plt.show()

def PlotProportionofTrialsOnceStabilized(mouse, sessions):

    total_num_random_choices = 0
    total_num_high_choices = 0
    total_num_low_choices = 0
    for session in sessions:
        actions = ProportionofTrialsOnceStabilized(session)
        total_num_random_choices = total_num_random_choices + actions["random"]
        total_num_high_choices = total_num_high_choices + actions["high"]
        total_num_low_choices = total_num_low_choices + actions["low"]
    
    categories = ["Random", "High", "Low"]
    values = [total_num_random_choices, total_num_high_choices, total_num_low_choices]
    fig, ax = plt.subplots()
    bars = ax.bar(categories, values, align='center')
    ax.set_title('Distribution of Trials Within State for ' + mouse)
    ax.set_xlabel('Trial Type')
    ax.set_ylabel('Number of Trials')
    ax.set_xticks(range(len(categories)))
    ax.set_xticklabels(categories)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    plt.show()

def PlotSessionwithProbabilities(session):

    num_trials = getNumTrials(session)
    actions, rewards = getActionsandRewards(session)
    trial_groups = GroupTrialsbyState(session)
    prob_0, prob_1, prob_2, prob_left, prob_center, prob_right, prob_high, prob_low, prob_random = getProportionEachArmOverTime(session)

    fig, ax = plt.subplots()
    x = np.arange(1, num_trials + 1)
    used_labels = set()
    
    # Plotting the groups and actions
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        begin = curr_trial_group["trials"][0]
        end = curr_trial_group["trials"][-1]

        label = "Arm 2 High" if curr_state == 1 and "Arm 2 High" not in used_labels else None
        if curr_state != 1 and "Arm 0 High" not in used_labels:
            label = "Arm 0 High"
        
        if label:
            used_labels.add(label)
        ax.fill_between(x, -0.01, 2.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3 if curr_state == 1 else 0, label=label)
    
    # Plotting individual trials
    reward_trials = np.where(rewards == 1)[0] + 1
    ax.scatter(reward_trials, actions[reward_trials - 1], color="yellowgreen")
    non_reward_trials = set(range(1, num_trials + 1)) - set(reward_trials)
    ax.scatter(list(non_reward_trials), actions[list(np.array(list(non_reward_trials))-1)], color="red", marker='x')
    
    # Overlaying probabilities
    ax.plot(np.arange(5, num_trials + 1), 2*np.asarray(prob_0), label='Prob. Arm 0', linewidth=2, color='black')
    ax.plot(np.arange(5, num_trials + 1), 2*np.asarray(prob_1), label='Prob. Arm 1', linewidth=2, color='blue')
    ax.plot(np.arange(5, num_trials + 1), 2*np.asarray(prob_2), label='Prob. Arm 2', linewidth=2, color='purple')
    
    # Setting up the plot
    ax.set_xlabel("Number of Trials")
    ax.set_xlim(1, num_trials + 1)
    ax.set_ylabel("Action Taken")
    ax.set_ylim([-0.02, 2.02])
    ax.set_yticks([0,1,2])
    ax.set_yticklabels(["Arm 0", "Arm 1", "Arm 2"])
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    plt.legend()
    plt.show()
