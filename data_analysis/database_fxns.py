import uuid
from smbprotocol.connection import Connection
from smbprotocol.session import Session
from smbprotocol.tree import TreeConnect
from smbprotocol.open import Open, ImpersonationLevel, CreateDisposition, FileAttributes, ShareAccess, CreateOptions, FilePipePrinterAccessMask
from smbprotocol.exceptions import EndOfFile
from smbprotocol.file_info import FileInformationClass
from datetime import datetime
import pandas as pd
import json
from io import StringIO

def getDataforAllSessions(mouse):

    def ParseJSONByLine(line):
        try:
            json_start = line.index("{")
            json_str = line[json_start:]
            return json.loads(json_str)
        except ValueError as e:
            print(f"Error finding JSON start: {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"Error parsing JSON: {e}")
            return None

    def ParseData(file_data_bytes):
        file_data_str = file_data_bytes.decode('utf-8')

        info_data = []
        settings_data = []
        event_data = []
        summary_data = []

        file_io = StringIO(file_data_str)
        
        for line in file_io:
            if line.startswith('I '):
                parts = line[2:].split(':')
                info_data.append([parts[0].strip(), ':'.join(parts[1:]).strip()])
            elif line.startswith(('S ', 'E ')):
                json_data = ParseJSONByLine(line[2:])
                if json_data:
                    settings_data.append(json_data)
            elif line.startswith('D '):
                parts = line[2:].split()
                event_data.append(parts)
            elif line.startswith('P '):
                parts = line.split(maxsplit=2)
                if len(parts) == 3:
                    timestamp = parts[1].strip()
                    json_data = ParseJSONByLine(parts[2])
                    if json_data:
                        json_data['time'] = timestamp
                        summary_data.append(json_data)

        info_df = pd.DataFrame(info_data, columns=['Key', 'Value'])
        settings_df = pd.DataFrame(settings_data)
        event_df = pd.DataFrame(event_data, columns=['Timestamp', 'Event'])
        summary_df = pd.DataFrame(summary_data)

        return info_df, settings_df, event_df, summary_df

    def getTextFiles(mouse, folder_path):
        
        folder_path = folder_path.replace('/', '\\')

        directory = Open(tree, folder_path)
        directory.create(
            ImpersonationLevel.Impersonation,
            FilePipePrinterAccessMask.GENERIC_READ,
            FileAttributes.FILE_ATTRIBUTE_DIRECTORY,
            ShareAccess.FILE_SHARE_READ,
            CreateDisposition.FILE_OPEN,
            CreateOptions.FILE_DIRECTORY_FILE
        )

        txt_files_with_dates = []
        for file_info in directory.query_directory("*", FileInformationClass.FILE_ID_BOTH_DIRECTORY_INFORMATION):
            file_name = file_info['file_name'].get_value().decode('utf-16le').strip()

            if file_name.startswith('._'):
                continue

            if file_name.endswith('.txt'):
                full_file_path = folder_path + '\\' + file_name
                if mouse[-2] == 'L':
                    date_str = file_name[8:18]
                else:
                    date_str = file_name[7:17]
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%Y-%m-%d')
                txt_files_with_dates.append((full_file_path, formatted_date))
        
        directory.close()

        txt_files_with_dates.sort(key=lambda x: x[1])

        return txt_files_with_dates

    wt_mice = ["MY_61C", "MY_61L", "MY_61R", "MY_62C", "MY_62L", "MY_62R"]
    vglut1_mice = ["MY_02C", "MY_02LR", "MY_02R", "MY_02L", "MY_88LR", "MY_88LL", "MY_88R"]
    vglut2_mice = ["MY_06L_VG2", "MY_07L_VG2", "MY_07LL_VG2", "MY_07LR_VG2", "MY_17R_VG2", "MY_48L_VG2"]
    print(mouse)

    """
    if (mouse[-1] == 'C') or (mouse[-1] == 'R' and mouse[-2] == 'L'):
        choice_mapping = {
            'left': 0,
            'center': 1,
            'right': 2
        }
    elif mouse[-1] == 'R' and mouse[-2] != 'L':
        choice_mapping = {
            'left': 0,
            'right': 1,
            'center': 2
        }
    elif mouse[-1] == 'L':
        choice_mapping = {
            'center': 0,
            'left': 1,
            'right': 2
        }
    """

    server = "ceph-gw02.hpc.swc.ucl.ac.uk"
    username = "ad.swc.ucl.ac.uk\myoung"
    password = "Jlry98,mhl06"
    share_name = "mrsic_flogel"

    connection = Connection(uuid.uuid4(), server, 445)
    connection.connect()
    session = Session(connection, username, password, require_encryption=True)
    session.connect()

    tree = TreeConnect(session, share_name)
    tree.connect()

    if mouse in wt_mice:
        folder_path = "public\\projects\\MaYo_20240326_ExploreExploit\\WT\\" + mouse
    elif mouse in vglut1_mice:
        folder_path = "public\\projects\\MaYo_20240326_ExploreExploit\\Vglut\\" + mouse
    elif mouse in vglut2_mice:
        folder_path = "public\\projects\\MeAhetal_20210211_Optogenetics_Behavior\\Explore_random_directed_train\\Vglut2\\" + mouse
    txt_files_with_dates = getTextFiles(mouse, folder_path)

    data_across_sessions = []
    for file_path, date in txt_files_with_dates:

        file = Open(tree, file_path)
        file.create(
            impersonation_level=ImpersonationLevel.Impersonation,
            desired_access=FilePipePrinterAccessMask.GENERIC_READ,
            file_attributes=FileAttributes.FILE_ATTRIBUTE_NORMAL,
            share_access=ShareAccess.FILE_SHARE_READ,
            create_disposition=CreateDisposition.FILE_OPEN,
            create_options=CreateOptions.FILE_NON_DIRECTORY_FILE
        )

        file_data = b""
        buffer_size = 4096
        offset = 0
        while True:
            try:
                chunk = file.read(offset, buffer_size)
                if not chunk:
                    break
                file_data += chunk
                offset += len(chunk)
            except EndOfFile:
                break
        file.close()

        info_df, settings_df, events_df, summary_df = ParseData(file_data)

        session_dictionary = {
            "mouse": mouse,
            "date": date,
            "settings": settings_df,
            "choice mapping": choice_mapping,
            "events": events_df,
            "summary": summary_df
        }

        data_across_sessions.append(session_dictionary)

    tree.disconnect()
    session.disconnect()
    connection.disconnect()

    print("Done getting data across all sessions.")

    return data_across_sessions

def getDataforSomeSessions(mouse, dates_of_interest, from_start_date=False):
    data_across_sessions = getDataforAllSessions(mouse)
    print("Done getting data across all sessions.")
    sessions_subset = []
    
    if from_start_date:
        start_date = datetime.strptime(dates_of_interest[0], '%Y-%m-%d').date()
        for session in data_across_sessions:
            session_date = datetime.strptime(session["date"], '%Y-%m-%d').date()
            if session_date > start_date:
                sessions_subset.append(session)
    else:
        for session in data_across_sessions:
            if session["date"] in dates_of_interest:
                sessions_subset.append(session)

    return sessions_subset