import numpy as np
import random

class QLearningAgent():

    def __init___(self, q_table, beta, alpha):
        self.q_table = q_table
        self.beta = beta
        self.alpha = alpha
    
    def choose_action(self, previous_action):

class MultiArmedBanditTask():

    def __init__(self, arms, drift_rates):
        self.arms = arms
        self.num_arms = len(arms)
        self.drift_rates = drift_rates
    
    def get_reward(self, arm):
        # The value 
        if random.random() < self.arms[arm]:
            return 1
        else: 
            return 0
        
    """
    def get_reward(self, arm):
        # Another way I saw of defining the bandit, where the reward dispensed at a given arm is pulled from a Gaussian distribution, where the mean is 
        return np.random.normal(self.arms[arm], 1, 1)
    """

    def update_arms(self):
        for i in range(self.num_arms):
            noise = np.random.normal(0, self.drift_rates[i])
            self.arms[i] = self.arms[i] + noise
        self.arms = np.clip(self.arms, 0, 1)

    def simulate(agent):