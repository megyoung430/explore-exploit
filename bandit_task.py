import numpy as np
import random

class MultiArmedBanditTask():

    def __init__(self, arms, epsilon):
        self.arms = arms
        self.num_arms = len(arms)
        self.epsilon = epsilon
    
    def choice(self, arm):
        if random.random() < self.arms[arm]:
            return 1
        else: 
            return 0
    
    def train(self, steps=1000):

        num_actions = self.num_arms
        q_array = np.zeros(num_actions)
        num_steps = np.zeros(num_actions)
        step_sizes = np.zeros(num_actions)
        rewards = []

        for i in range(steps):
            explore_probability = random.uniform(0,1)
            if np.unique(q_array).size == 1 or explore_probability < self.epsilon:
                action_index = np.random.permutation(num_actions)[0]
            else:
                action_index = np.argmax(q_array)
        
            num_steps[action_index] += 1
            step_sizes[action_index] = 1/num_steps[action_index]
            reward = self.choice(action_index)
            rewards.append(reward)
            q_array[action_index] += step_sizes[action_index]*(reward-q_array[action_index])

        return rewards, q_array