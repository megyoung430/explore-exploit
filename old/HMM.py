import numpy as np
from functools import partial
from sklearn.linear_model import LogisticRegression
from scipy.special import expit as sigmoid
from scipy.stats import bernoulli
from tqdm.auto import trange
from scipy.special import logit

from ssm.observations import Observations
from ssm.transitions import StationaryTransitions
from ssm import HMM

class MultiArmedBanditObservations(Observations):

    """
    A class for the observations in the multi-armed bandit task. This creates an instantiation of the k-arm bandit transition model.

    rewards: (num_trials, 1) array that catalogues the reward recieved at each trial. The values in the array are either 1 (reward) or 0 (no reward)
    choices: (K, 1) array that indicayes the arm the animal chose for each trial. The values in the array are integers between 0 and K-1.
    reward_probs: (K, 1) array of the reward probability for each arm of the bandit
    """
    
    def __init__(self, K, D, M=0, reward_probs=None, **kwargs):
        super(MultiArmedBanditObservations, self).__init__(K, D, M=M, **kwargs)
        self.reward_probs = reward_probs
    
    def log_likelihoods(self, rewards, choices, mask, tag):
        rewards, choices = rewards[:, 0], choices[:, 0]

        num_trials = len(rewards)
        lls = np.zeros((num_trials, self.K))
        for k in range(self.K):
            p = self.reward_probs[k] * (choices == k) + (1 - self.reward_probs[k]) * (choices != k)
            lls[:, k] = bernoulli.logpmf(rewards, p)
        return lls

def hmm_stickiness(choices, alpha, beta, tau):

    decay = np.exp(-1/tau)
    s1 = alpha + beta/2
    