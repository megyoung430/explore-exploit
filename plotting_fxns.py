import matplotlib.pyplot as plt
import numpy as np

def PlotSummaryFigure(trial_groups, num_trials, snippet, actions, rewards, posterior, q_states, q_actions):
    summary_figure = plt.figure()
    ax1 = summary_figure.add_subplot(3,1,1)
    ax2 = summary_figure.add_subplot(3,1,2)
    ax3 = summary_figure.add_subplot(3,1,3)

    x = np.arange(num_trials)
    actions = np.asarray(actions)
    arm_0_inds = np.where(actions==0)
    arm_1_inds = np.where(actions==1)
    actions[arm_0_inds] = 1
    actions[arm_1_inds] = 0
    reward_trials = np.where(np.asarray(rewards) == 1)[0]
    
    ax1.plot(posterior[:,1], color="dimgrey", linewidth=2)
    ax1.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax1.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == -1:
                ax1.fill_between(x, -0.01, 1.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="State 1: Arm 1 Low/Arm 2 High")
            else:
                ax1.fill_between(x, -0.01, 1.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax1.set_xlabel("Number of Trials")
    ax1.set_xlim([0,snippet])
    ax1.set_ylabel("P(State = 1) / P(Arm 2 = High)")
    ax1.set_ylim([-0.02,1.02])
    ax1.spines['top'].set_visible(False)
    ax1.spines['right'].set_visible(False)
    ax1.legend()
    
    ax2.plot(q_states[:,0], color="lightgrey", label="S0: A2 Low", linewidth=3)
    ax2.plot(q_states[:,1], color="black", label="S1: A2 High", linewidth=3)
    ax2.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax2.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    y_min = min(-0.02, min(element for row in q_states for element in row))
    y_max = max(1.02, max(element for row in q_states for element in row))
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == -1:
                ax2.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="S1: A2 High")
            else:
                ax2.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax2.set_xlabel("Number of Trials")
    ax2.set_xlim([0,snippet])
    ax2.set_ylabel("Abstract Q-Values")
    ax2.set_ylim([y_min, y_max])
    ax2.spines['top'].set_visible(False)
    ax2.spines['right'].set_visible(False)
    ax2.legend()

    ax3.plot(q_actions[:,0], color="dimgrey", label="Arm 0", linewidth=3)
    ax3.plot(q_actions[:,1], color="lightgrey", label="Arm 1", linewidth=3)
    ax3.plot(q_actions[:,2], color="black", label="Arm 2", linewidth=3)
    ax3.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax3.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    y_min = min(-0.02, min(element for row in q_actions for element in row))
    y_max = max(1.02, max(element for row in q_actions for element in row))
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == -1:
                ax3.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="S1: A2 High")
            else:
                ax3.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax3.set_xlabel("Number of Trials")
    ax3.set_xlim([0,snippet])
    ax3.set_ylabel("Action Q-Values")
    ax3.set_ylim([y_min, y_max])
    ax3.spines['top'].set_visible(False)
    ax3.spines['right'].set_visible(False)
    ax3.legend()

    plt.show()

def PlotOptoChoices(after_opto_action, opto_change, delta_beta, delta_alpha):
    plt.hist(after_opto_action, bins=[0, 1, 2, 3], edgecolor='black', align='left', density=True, color='skyblue')
    plt.xticks(ticks=[0, 1, 2], labels=['Arm 0', 'Arm 1', 'Arm 2'])
    plt.xlabel("Arms")
    plt.ylabel("Probability")
    plt.suptitle("Probability of Choosing Each Arm After Optogenetic Stimulation", fontsize=14)
    if opto_change == "increase exploration":
        title = "Perturbation: " + opto_change
        subtitle = "with opto_beta = beta/" + str(delta_beta)
    elif opto_change == "decrease stickiness":
        title = "Perturbation: " + opto_change
        subtitle = "with opto_alpha = alpha - " + str(delta_alpha)
    elif opto_change == "both":
        title = "Perturbation: increase exploration and decrease stickiness"
        subtitle = " with opto_beta = beta/" + str(delta_beta) + " and with opto_alpha = alpha - " + str(delta_alpha)
    plt.title(title, fontsize=12)
    plt.figtext(0.5, 0.85, subtitle, ha='center', fontsize=10)
    ax = plt.gca()
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.set_ylim([0,1])
    plt.show()

def PlotSummaryPFigure(trial_groups, num_trials, snippet, actions, rewards, posterior):
    summary_p_figure = plt.figure()
    ax = summary_p_figure.add_subplot(1, 1, 1)
    ax.plot(posterior[:,1], color="dimgrey", linewidth=2)
    actions = np.asarray(actions)
    arm_0_inds = np.where(actions==0)
    arm_1_inds = np.where(actions==1)
    actions[arm_0_inds] = 1
    actions[arm_1_inds] = 0
    reward_trials = np.where(np.asarray(rewards) == 1)[0]
    ax.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    x = np.arange(num_trials)
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == 0:
                ax.fill_between(x, -0.01, 1.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="State 1: Arm 1 Low/Arm 2 High")
            else:
                ax.fill_between(x, -0.01, 1.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax.set_xlabel("Number of Trials")
    ax.set_xlim([0,snippet])
    ax.set_ylabel("P(State = 1) / P(Arm 2 = High)")
    ax.set_ylim([-0.01,1.01])
    # ax.legend()
    plt.show()

def PlotSummaryQStatesFigure(trial_groups, num_trials, snippet, actions, rewards, q_states):
    summary_q_figure = plt.figure()
    ax = summary_q_figure.add_subplot(1, 1, 1)
    ax.plot(q_states[:,0], color="lightgrey", label="S0: A2 Low", linewidth=3)
    ax.plot(q_states[:,1], color="black", label="S1: A2 High", linewidth=3)
    actions = np.asarray(actions)
    arm_0_inds = np.where(actions==0)
    arm_1_inds = np.where(actions==1)
    actions[arm_0_inds] = 1
    actions[arm_1_inds] = 0 
    reward_trials = np.where(np.asarray(rewards) == 1)[0]
    ax.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    x = np.arange(num_trials)
    y_min = min(-0.01, min(element for row in q_states for element in row))
    y_max = max(1.01, max(element for row in q_states for element in row))
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == 0:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="S1: A2 High")
            else:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax.set_xlabel("Number of Trials")
    ax.set_xlim([0,snippet])
    ax.set_ylabel("Abstract Q-Values")
    ax.set_ylim([y_min, y_max])
    ax.legend()
    plt.show()

def PlotSummaryQActionsFigure(trial_groups, num_trials, snippet, actions, rewards, q_actions):
    summary_q_figure = plt.figure()
    ax = summary_q_figure.add_subplot(1, 1, 1)
    ax.plot(q_actions[:,0], color="dimgrey", label="Arm 0", linewidth=3)
    ax.plot(q_actions[:,1], color="lightgrey", label="Arm 1", linewidth=3)
    ax.plot(q_actions[:,2], color="black", label="Arm 2", linewidth=3)
    actions = np.asarray(actions)
    arm_0_inds = np.where(actions==0)
    arm_1_inds = np.where(actions==1)
    actions[arm_0_inds] = 1
    actions[arm_1_inds] = 0 
    reward_trials = np.where(np.asarray(rewards) == 1)[0]
    ax.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    x = np.arange(num_trials)
    y_min = min(-0.01, min(element for row in q_actions for element in row))
    y_max = max(1.01, max(element for row in q_actions for element in row))
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == 0:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="S1: A2 High")
            else:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax.set_xlabel("Number of Trials")
    ax.set_xlim([0,snippet])
    ax.set_ylabel("Action Q-Values")
    ax.set_ylim([y_min, y_max])
    ax.legend()
    plt.show()