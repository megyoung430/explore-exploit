import matplotlib.pyplot as plt
import numpy as np

def PlotSummaryPFigure(trial_groups, num_trials, snippet, actions, rewards, posterior):
    summary_p_figure = plt.figure()
    ax = summary_p_figure.add_subplot(1, 1, 1)
    ax.plot(posterior[:,1], color="dimgrey", linewidth=2)
    actions = np.asarray(actions)
    arm_0_inds = np.where(actions==0)
    arm_1_inds = np.where(actions==1)
    actions[arm_0_inds] = 1
    actions[arm_1_inds] = 0
    reward_trials = np.where(np.asarray(rewards) == 1)[0]
    ax.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    x = np.arange(num_trials)
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == 0:
                ax.fill_between(x, -0.01, 1.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="State 1: Arm 1 Low/Arm 2 High")
            else:
                ax.fill_between(x, -0.01, 1.01, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax.set_xlabel("Number of Trials")
    ax.set_xlim([0,snippet])
    ax.set_ylabel("P(State = 1) / P(Arm 2 = High)")
    ax.set_ylim([-0.01,1.01])
    # ax.legend()
    plt.show()

def PlotSummaryQStatesFigure(trial_groups, num_trials, snippet, actions, rewards, q_states):
    summary_q_figure = plt.figure()
    ax = summary_q_figure.add_subplot(1, 1, 1)
    ax.plot(q_states[:,0], color="lightgrey", label="S0: A2 Low", linewidth=3)
    ax.plot(q_states[:,1], color="black", label="S1: A2 High", linewidth=3)
    actions = np.asarray(actions)
    arm_0_inds = np.where(actions==0)
    arm_1_inds = np.where(actions==1)
    actions[arm_0_inds] = 1
    actions[arm_1_inds] = 0 
    reward_trials = np.where(np.asarray(rewards) == 1)[0]
    ax.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    x = np.arange(num_trials)
    y_min = min(-0.01, min(element for row in q_states for element in row))
    y_max = max(1.01, max(element for row in q_states for element in row))
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == 0:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="S1: A2 High")
            else:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax.set_xlabel("Number of Trials")
    ax.set_xlim([0,snippet])
    ax.set_ylabel("Abstract Q-Values")
    ax.set_ylim([y_min, y_max])
    ax.legend()
    plt.show()

def PlotSummaryQActionsFigure(trial_groups, num_trials, snippet, actions, rewards, q_actions):
    summary_q_figure = plt.figure()
    ax = summary_q_figure.add_subplot(1, 1, 1)
    ax.plot(q_actions[:,0], color="dimgrey", label="Arm 0", linewidth=3)
    ax.plot(q_actions[:,1], color="lightgrey", label="Arm 1", linewidth=3)
    ax.plot(q_actions[:,2], color="black", label="Arm 2", linewidth=3)
    actions = np.asarray(actions)
    arm_0_inds = np.where(actions==0)
    arm_1_inds = np.where(actions==1)
    actions[arm_0_inds] = 1
    actions[arm_1_inds] = 0 
    reward_trials = np.where(np.asarray(rewards) == 1)[0]
    ax.scatter(np.arange(num_trials),np.asarray(actions)/2, color="yellowgreen")
    for trial in reward_trials:
        ax.scatter(trial, actions[trial]/2, edgecolors='darkgreen', facecolors='none', linewidths=2)
    x = np.arange(num_trials)
    y_min = min(-0.01, min(element for row in q_actions for element in row))
    y_max = max(1.01, max(element for row in q_actions for element in row))
    for i in range(len(trial_groups)):
        curr_trial_group = trial_groups[i]
        curr_state = curr_trial_group["state"]
        if curr_state == 1:
            begin = curr_trial_group["trials"][0]
            end = curr_trial_group["trials"][-1]
            if i == 0:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3, label="S1: A2 High")
            else:
                ax.fill_between(x, y_min, y_max, where=(x >= begin) & (x <= end), color='khaki', alpha=0.3)
    ax.set_xlabel("Number of Trials")
    ax.set_xlim([0,snippet])
    ax.set_ylabel("Action Q-Values")
    ax.set_ylim([y_min, y_max])
    ax.legend()
    plt.show()